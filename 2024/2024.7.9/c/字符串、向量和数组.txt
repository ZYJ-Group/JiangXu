数组：typename arrayname[arraysize];
     1.数组可以存储多个相同数据类型的值 数组大小要告知 如果不定义大小则要用一组数对其初始化即int month[]={1,2,3,4};
     2.定义数组时要告诉数据类型 数组名 大小 如 int month[12];不能用另一个数组对数组进行初始化
     3.数组中的元素是从0开始的 如month[0]则表示数组中的第一个元素 即数组最后一个元素的索引比数组长度小一
     4.数组的赋值 int month[3]={1,2,3}; 如果只对数组的一部分进行初始化 则编译器将把其他元素设置为0 
       int month[3]={1,2}; 则month[2]=0   全部赋相同值int month[3]={0}；
     5.只有在定义数组时才可以进行初始化 int month[3]={1,2,3}； 而month[3]={1,2,3};是错的因为month[3]是一个元素而不是数组
     6.在定义数组时不定义大小赋值时 编译器自动计算大小 short data[]={1,5,8,6,9,10};则大小为6
     7.在C++11中注意以下：
                      （1）初始化数组时，可省略等号（=） double earnings[4]{1.2e4，1.6e4，1.1e4，1.7e4};
                      （2）可不在大括号内包含任何东西，这将把所有元素都设置为零 unsigned int count[10]={};
                       (3) char tlifs[4] = {'h', 'i', 112, 110};这个定义是正确的112和110会被自动转换成ASCII码存储
                      （4）long plifs[3]={25，92，3.0};这是错误的因为缩窄转换
     8.数组的大小在声明时必须是一个常量表达式 这意味着数组大小在编译时就已经确定 无法在运行时更改 如果使用变量来定义数组的长度
       数组的大小不会随着变量值的改变而改变 int arr[len]; len=10;
     9.sizeof(数组名);  数组占多大字节
       数组长度:
              sizeof(数组名)/sizeof(数据类型); 
              sizeof(数组名)/sizeof(arr[0]);
    10.多维数组：（1）即数组内的元素也是一个数组
                （2）int arr[3][4];是一个三行四列的二维数组
                （2）初始化为 int arr[3][4]={1,2,3,4,5,6,7,.......12};//因为是连续的地址所以第一行赋值完会依次赋值第二行
                        int arr[3][4]={ {  },
                                        {  },
                                        {  },                   //也可以把二维结构按每行一个大括号进行赋值
                                        {  },
                                              };
                （4）二维数组遍历时需要知道多少行列 sizeof（arr[0]）这是计算一行的字节数 然后双重for循环进行遍历

向量vector：和数组类似特点是其长度是不固定的
          1.使用时引入#include<vector> 使用 vector<datatype> v;//定义了一个向量叫v它的数据类型都是datatype
          2.列表初始化 vector<int> vector={1,2,3,4,5,6};// =号可以省略
          3.vector<short> v2（5）;//定义一个向量叫v2它的大小为5 每个元素的值都是0
          4.vector<long> v3（5，10）;//定义了一个向量叫v3它的大小为5 每个元素都是10
          5.访问元素：v3[2]=5;表示v3向量中的第3个元素
          6.v3.size（）;可以获取v3的大小 方便我们遍历向量
          7.可以给一个向量添加新的元素 v3.push_back(100);则v3这个向量中有6个元素最后一个元素的值为100
          

字符串（c语言）：字符串就是一串字符的集合 就是一个字符数组
            1.c语言用char[]类型来表示字符串的 为区分字符数组和字符串 规定字符串必须以空字符结束即'\0'
              char str1[]={'a','b','c'};这是一个字符数组而不是字符串 
              char str1[]={'a','b','c','\0'};以\0结尾表示字符串
              因为 C 中的许多字符串处理函数都依赖于这种空字符结尾特性 所以要区分开来
            2.char str2[6]="hello";//可以这么定义但一定要给出加上\0后的长度否则就不是字符串了
            
字符串（cpp）：可以理解成一个特殊的数组里面的元素是一个个的字符
           1.c++的标准库中有表示字符串的数据类型string表示长度可变的字符序列 必须包含 #include<string> using namespace std;
           2.string name;定义一个字符串变量name 可以用来保存输入的字符信息
           3.初始化时可以进行拷贝初始化 即可以把一个字符串赋给一个字符串变量 string a=b;//此时b为一个字符串
                                                                   string b="holle word!"; 
             直接初始化 string c("ixu");  string d(8,'i');//表示 i这个字符重复出现8次存储在d这个字符串变量中
           4.访问字符串时就像访问数组时给下标 c[0]=I; 这样c这个字符串就是Ixu了 如果访问最后一个字符则需要知道字符串的长度用 c.size()
             那访问最后一个字符就为 c[c.size()-1] =U; 则c字符串为IxU了
           5.string类型的长度是不固定的所以可以经行拼接操作 string str1="hello",str2(world"); string str3=str1+str2;
           6.而string str4="hello"+"world";//这是错误的因为string类型是基于c语言的库必须有一个string类型的操作数才可以进行 + 拼接
             并且按左结合 每次相加左边必须有一个string类型与字符串相加以实现连续相加拼接
           7.string类型可以由 == != 来判断两个字符串是否相等判断标准为字符串的长度以及每个位置字符是否相等
             而由 < > <= >= 来判断两个字符串的大小 如果从某个位置不相等就比较ASCII值
           8.读取输入字词 string str; cin>>str;当检测到输入空白符时就退出了 getline()函数读取一行信息 而cin.get（）是读取一个字符
            使用cin.get()读取很多个字符时 char str[];  cin.get（str,20）;


           